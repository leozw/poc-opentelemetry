{"version":3,"file":"dynamodb.js","sourceRoot":"","sources":["../../../src/services/dynamodb.ts"],"names":[],"mappings":";;;AAAA;;;;;;;;;;;;;;GAcG;AACH,4CAA4D;AAE5D,8EAG6C;AAO7C,MAAa,wBAAwB;IACnC,kBAAkB,CAAC,iBAAoC;;QACrD,MAAM,QAAQ,GAAa,cAAQ,CAAC,MAAM,CAAC;QAC3C,IAAI,QAA4B,CAAC;QACjC,MAAM,UAAU,GAAG,KAAK,CAAC;QACzB,MAAM,SAAS,GAAG,iBAAiB,CAAC,WAAW,CAAC;QAEhD,MAAM,cAAc,GAAG;YACrB,CAAC,yCAAkB,CAAC,SAAS,CAAC,EAAE,qCAAc,CAAC,QAAQ;YACvD,CAAC,yCAAkB,CAAC,OAAO,CAAC,EAAE,MAAA,iBAAiB,CAAC,YAAY,0CAAE,SAAS;YACvE,CAAC,yCAAkB,CAAC,YAAY,CAAC,EAAE,SAAS;YAC5C,CAAC,yCAAkB,CAAC,YAAY,CAAC,EAAE,IAAI,CAAC,SAAS,CAC/C,iBAAiB,CAAC,YAAY,CAC/B;SACF,CAAC;QAEF,IAAI,SAAS,KAAK,cAAc,EAAE;YAChC,cAAc,CAAC,yCAAkB,CAAC,wBAAwB,CAAC,GAAG,MAAM,CAAC,IAAI,CACvE,iBAAiB,CAAC,YAAY,CAAC,YAAY,CAC5C,CAAC;SACH;QAED,OAAO;YACL,UAAU;YACV,cAAc;YACd,QAAQ;YACR,QAAQ;SACT,CAAC;IACJ,CAAC;IAED,YAAY,CACV,QAA4B,EAC5B,IAAU,EACV,MAAc,EACd,MAAmC;;QAEnC,MAAM,SAAS,GAAG,QAAQ,CAAC,OAAO,CAAC,WAAW,CAAC;QAE/C,IAAI,SAAS,KAAK,cAAc,EAAE;YAChC,IAAI,KAAK,CAAC,OAAO,CAAC,MAAA,QAAQ,CAAC,IAAI,0CAAE,gBAAgB,CAAC,EAAE;gBAClD,IAAI,CAAC,YAAY,CACf,yCAAkB,CAAC,8BAA8B,EACjD,QAAQ,CAAC,IAAI,CAAC,gBAAgB,CAAC,GAAG,CAChC,CAAC,CAAmC,EAAE,EAAE,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,CAC3D,CACF,CAAC;aACH;SACF;IACH,CAAC;CACF;AAjDD,4DAiDC","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Span, SpanKind, Tracer } from '@opentelemetry/api';\nimport { RequestMetadata, ServiceExtension } from './ServiceExtension';\nimport {\n  DbSystemValues,\n  SemanticAttributes,\n} from '@opentelemetry/semantic-conventions';\nimport {\n  AwsSdkInstrumentationConfig,\n  NormalizedRequest,\n  NormalizedResponse,\n} from '../types';\n\nexport class DynamodbServiceExtension implements ServiceExtension {\n  requestPreSpanHook(normalizedRequest: NormalizedRequest): RequestMetadata {\n    const spanKind: SpanKind = SpanKind.CLIENT;\n    let spanName: string | undefined;\n    const isIncoming = false;\n    const operation = normalizedRequest.commandName;\n\n    const spanAttributes = {\n      [SemanticAttributes.DB_SYSTEM]: DbSystemValues.DYNAMODB,\n      [SemanticAttributes.DB_NAME]: normalizedRequest.commandInput?.TableName,\n      [SemanticAttributes.DB_OPERATION]: operation,\n      [SemanticAttributes.DB_STATEMENT]: JSON.stringify(\n        normalizedRequest.commandInput\n      ),\n    };\n\n    if (operation === 'BatchGetItem') {\n      spanAttributes[SemanticAttributes.AWS_DYNAMODB_TABLE_NAMES] = Object.keys(\n        normalizedRequest.commandInput.RequestItems\n      );\n    }\n\n    return {\n      isIncoming,\n      spanAttributes,\n      spanKind,\n      spanName,\n    };\n  }\n\n  responseHook(\n    response: NormalizedResponse,\n    span: Span,\n    tracer: Tracer,\n    config: AwsSdkInstrumentationConfig\n  ) {\n    const operation = response.request.commandName;\n\n    if (operation === 'BatchGetItem') {\n      if (Array.isArray(response.data?.ConsumedCapacity)) {\n        span.setAttribute(\n          SemanticAttributes.AWS_DYNAMODB_CONSUMED_CAPACITY,\n          response.data.ConsumedCapacity.map(\n            (x: { [DictionaryKey: string]: any }) => JSON.stringify(x)\n          )\n        );\n      }\n    }\n  }\n}\n"]}